{"ast":null,"code":"import _regeneratorRuntime from \"/Users/robert/Desktop/Uni/team40/moodportfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/robert/Desktop/Uni/team40/moodportfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/robert/Desktop/Uni/team40/moodportfolio/src/components/Registration.js\";\nimport React from 'react';\nimport { withFormik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nvar passwordRegex = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*)(?=.*[@$!.%*?&])[A-Za-z@$!%*?&]');\n\nvar App = function App(_ref) {\n  var values = _ref.values,\n      errors = _ref.errors,\n      touched = _ref.touched;\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"name\",\n    placeholder: \"Your Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" \", touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" \", errors.email), React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Your Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" \", errors.password), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Your Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nvar Registration = withFormik({\n  mapPropsToValues: function mapPropsToValues(_ref2) {\n    var name = _ref2.name,\n        email = _ref2.email,\n        password = _ref2.password;\n    return {\n      email: email || '',\n      password: password || '',\n      name: name || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    // TODO: asynchronously check if email exists\n    email: Yup.string().email('Email not valid').max(100).required('Email is required'),\n    password: Yup.string().min(8, 'Password must be 8 characters or longer').max(100, 'Password must be shorter than 200 characters').matches(passwordRegex, 'Password must have a number, capital letter and a special character.').required('Password is required')\n  }),\n  handleSubmit: function handleSubmit(values) {\n    // let headers = new Headers();\n    // // headers.append('Content-Type', 'application/json');\n    // // headers.append('Accept', 'application/json');\n    // // headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');\n    // // headers.append('Access-Control-Allow-Credentials', 'true');\n    // // headers.append('POST', 'OPTIONS');\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var rawResponse, content;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:5000/api/UserExists', {\n                method: 'POST',\n                mode: 'no-cors',\n                // headers: headers,\n                contentType: \"application/json\",\n                body: JSON.stringify({\n                  \"email\": values.email\n                })\n              });\n\n            case 2:\n              rawResponse = _context.sent;\n              _context.next = 5;\n              return rawResponse.json();\n\n            case 5:\n              content = _context.sent;\n              console.log(content);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n})(App);\nexport default Registration;","map":{"version":3,"sources":["/Users/robert/Desktop/Uni/team40/moodportfolio/src/components/Registration.js"],"names":["React","withFormik","Form","Field","Yup","passwordRegex","RegExp","App","values","errors","touched","email","password","Registration","mapPropsToValues","name","validationSchema","object","shape","string","max","required","min","matches","handleSubmit","fetch","method","mode","contentType","body","JSON","stringify","rawResponse","json","content","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {withFormik, Form, Field} from 'formik'\nimport * as Yup from 'yup'\n\nconst passwordRegex = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*)(?=.*[@$!.%*?&])[A-Za-z@$!%*?&]');\n\n\nconst App = ({\n  values,\n  errors,\n  touched\n}) => (\n  <Form>\n\n    <div>\n      <Field \n        name=\"name\"\n        placeholder=\"Your Name\"/>\n        <br/>\n    </div>\n\n    {/* touched.* makes sure that errors are checked only once the fiels is left */}\n    <div> {touched.email && errors.email && <p> {errors.email}</p>}\n      <Field\n        type=\"email\" \n        name=\"email\" \n        placeholder=\"Your Email\"/>\n        <br/>\n    </div>\n\n    <div>{touched.password && errors.password && <p> {errors.password}</p>}\n    <Field\n      type=\"password\"\n      name=\"password\"\n      placeholder=\"Your Password\"/>\n      <br/>\n    </div>\n\n    <button type=\"submit\">Submit</button>\n  </Form>\n)\n\n\nconst Registration = withFormik ({\n    mapPropsToValues({name, email, password}) {\n        return {\n            email: email || '',\n            password: password ||'',\n            name: name || ''\n        }\n    },\n\n    validationSchema: Yup.object().shape({\n    // TODO: asynchronously check if email exists\n    email: Yup.string()\n              .email('Email not valid')\n              .max(100)\n              .required('Email is required'),\n    password: Yup.string()\n                 .min(8, 'Password must be 8 characters or longer')\n                 .max(100, 'Password must be shorter than 200 characters')\n                 .matches(passwordRegex, 'Password must have a number, capital letter and a special character.')\n                 .required('Password is required')\n    }),\n    \n    handleSubmit(values) {\n        // let headers = new Headers();\n        // // headers.append('Content-Type', 'application/json');\n        // // headers.append('Accept', 'application/json');\n        // // headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');\n        // // headers.append('Access-Control-Allow-Credentials', 'true');\n        // // headers.append('POST', 'OPTIONS');\n\n        (async () => {\n            const rawResponse = await fetch('http://localhost:5000/api/UserExists', {\n              method: 'POST',\n              mode: 'no-cors',\n              // headers: headers,\n              contentType: \"application/json\",\n              body: JSON.stringify({\"email\": values.email})\n            });\n            const content = await rawResponse.json();\n        \n            console.log(content);\n          })();\n    }\n}) (App)\n\nexport default Registration"]},"metadata":{},"sourceType":"module"}