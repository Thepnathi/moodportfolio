{"ast":null,"code":"import _regeneratorRuntime from \"/Users/robert/Desktop/Uni/team40/moodportfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/robert/Desktop/Uni/team40/moodportfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/robert/Desktop/Uni/team40/moodportfolio/src/components/Registration.js\";\nimport React from 'react';\nimport { withFormik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport logo from './logo.png';\nimport '../stylesheet/register.css';\nvar passwordRegex = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*)(?=.*[@$!.%*?&])[A-Za-z@$!%*?&]');\n\nvar App = function App(_ref) {\n  var values = _ref.values,\n      errors = _ref.errors,\n      touched = _ref.touched;\n  return React.createElement(Form, {\n    className: \"formBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    id: \"registerLogo\",\n    src: logo,\n    alt: \"Moodportfol.io Logo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Field, {\n    className: \"field\",\n    name: \"name\",\n    placeholder: \"Your Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, errors.name)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Field, {\n    className: \"field\",\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Your Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" \", errors.email)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Field, {\n    className: \"field\",\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Your Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \" \", errors.password)), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nvar Registration = withFormik({\n  // Same as handleChange\n  mapPropsToValues: function mapPropsToValues(_ref2) {\n    var name = _ref2.name,\n        email = _ref2.email,\n        password = _ref2.password;\n    return {\n      email: email || '',\n      password: password || '',\n      name: name || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().min(3, 'Name must be 3 characters or longer').max(60, 'Name must be shorter than 60 characters').required('Name is required'),\n    email: Yup.string().email('Email not valid').max(100).required('Email is required').test(\"checkEmail\", \"Email already in use\",\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(email) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('http://localhost:5000/api/UserExists', {\n                  method: \"POST\",\n                  mode: \"cors\",\n                  cache: \"no-cache\",\n                  credentials: \"same-origin\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    'email': email\n                  })\n                });\n\n              case 2:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res.clone().json().exists);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }()),\n    password: Yup.string().min(8, 'Password must be 8 characters or longer').max(100, 'Password must be shorter than 200 characters').matches(passwordRegex, 'Password must have a number, capital letter and a special character.').required('Password is required')\n  }),\n  handleSubmit: function handleSubmit(values) {\n    fetch('http://localhost:5000/api/Register', {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, cors, *same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\",\n      // include, *same-origin, omit\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'name': values.name,\n        'email': values.email,\n        'password': values.password\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      return console.log(json);\n    });\n  }\n})(App);\nexport default Registration;","map":{"version":3,"sources":["/Users/robert/Desktop/Uni/team40/moodportfolio/src/components/Registration.js"],"names":["React","withFormik","Form","Field","Yup","logo","passwordRegex","RegExp","App","values","errors","touched","name","email","password","Registration","mapPropsToValues","validationSchema","object","shape","string","min","max","required","test","fetch","method","mode","cache","credentials","headers","body","JSON","stringify","res","clone","json","exists","matches","handleSubmit","then","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {withFormik, Form, Field} from 'formik'\nimport * as Yup from 'yup'\nimport logo from './logo.png'\nimport '../stylesheet/register.css'\n\nconst passwordRegex = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*)(?=.*[@$!.%*?&])[A-Za-z@$!%*?&]');\n\n\n\nconst App = ({\n  values,\n  errors,\n  touched\n}) => (\n  <Form className=\"formBody\">\n      <img id=\"registerLogo\" src={logo} alt=\"Moodportfol.io Logo\"/>\n    <div>\n      <Field className=\"field\"\n        name=\"name\"\n        placeholder=\"Your Name\"/>\n        {touched.name && errors.name && <p>{errors.name}</p>}\n    </div>\n\n    {/* touched.* makes sure that errors are checked only once the fiels is left */}\n    <div>\n      <Field className=\"field\"\n        type=\"email\" \n        name=\"email\" \n        placeholder=\"Your Email\"/>\n        {touched.email && errors.email && <p> {errors.email}</p>}\n    </div>\n\n    <div>\n    <Field className=\"field\"\n      type=\"password\"\n      name=\"password\"\n      placeholder=\"Your Password\"/>\n      {touched.password && errors.password && <p> {errors.password}</p>}\n    </div>\n\n    <button type=\"submit\">Submit</button>\n  </Form>\n)\n\n\nconst Registration = withFormik ({\n  // Same as handleChange\n    mapPropsToValues({name, email, password}) {\n        return {\n            email: email || '',\n            password: password ||'',\n            name: name || ''\n        }\n    },\n\n    validationSchema: Yup.object().shape({\n    name: Yup.string() \n              .min(3, 'Name must be 3 characters or longer')\n              .max(60, 'Name must be shorter than 60 characters')\n              .required('Name is required'),\n    email: Yup.string()\n              .email('Email not valid')\n              .max(100)\n              .required('Email is required')\n              .test(\"checkEmail\", \"Email already in use\", \n                async function(email) {\n                  const res = await fetch('http://localhost:5000/api/UserExists', {\n                    method: \"POST\",\n                    mode: \"cors\",\n                    cache: \"no-cache\",\n                    credentials: \"same-origin\",\n                    headers: {\n                      \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({'email' : email})\n                  });\n                  // console.log(res.clone().json())\n                  return res.clone().json().exists;\n                }),\n    password: Yup.string()\n                 .min(8, 'Password must be 8 characters or longer')\n                 .max(100, 'Password must be shorter than 200 characters')\n                 .matches(passwordRegex, 'Password must have a number, capital letter and a special character.')\n                 .required('Password is required')\n    }),\n    \n    handleSubmit(values) {\n        fetch('http://localhost:5000/api/Register', {\n          method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n          mode: \"cors\", // no-cors, cors, *same-origin\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: \"same-origin\", // include, *same-origin, omit\n          headers: {\n              \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({'name' : values.name,\n                                'email' : values.email,\n                                'password' : values.password})\n        })\n        .then((res) => res.json())\n        .then(json => console.log(json))\n    }\n}) (App)\n\nexport default Registration"]},"metadata":{},"sourceType":"module"}